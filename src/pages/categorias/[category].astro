---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import categoriesData from '../../data/categories.json';
import type { CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
  const allPosts = await getCollection('blog');
  
  return categoriesData.map((category) => {
    const categoryPosts = allPosts.filter((post: CollectionEntry<'blog'>) => 
      post.data.categories && 
      post.data.categories.some((cat: string) => 
        cat.toLowerCase() === category.name.toLowerCase()
      )
    ).sort((a: CollectionEntry<'blog'>, b: CollectionEntry<'blog'>) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

    return {
      params: { category: category.slug },
      props: { 
        category: category,
        posts: categoryPosts
      }
    };
  });
}

interface Props {
  category: {
    id: number;
    name: string;
    slug: string;
    count: number;
  };
  posts: CollectionEntry<'blog'>[];
}

const { category, posts }: Props = Astro.props;
---

<Layout title={'Categoría: ' + category.name + ' - El Cerillazo'}>
  <div class="mx-auto max-w-6xl px-4 py-12">
    <header class="text-center mb-12">
      <h1 class="text-4xl md:text-5xl font-bold space-text-gradient mb-4">
        Categoría: {category.name}
      </h1>
      <p class="text-xl text-gray-600 dark:text-gray-400">
        {posts.length} {posts.length === 1 ? 'post' : 'posts'} encontrados
      </p>
    </header>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
      {posts.map((post: CollectionEntry<'blog'>) => (
        <article class="glass rounded-xl p-6 hover-lift">
          {post.data.image && (
            <img 
              src={post.data.image} 
              alt={post.data.title}
              class="w-full h-48 object-cover rounded-lg mb-4"
              loading="lazy"
            />
          )}
          <h2 class="text-xl font-semibold mb-3">
            <a href={'/blog/' + post.slug + '/'} class="hover:text-blue-500 dark:hover:text-blue-400 transition-colors">
              {post.data.title}
            </a>
          </h2>
          <time class="text-sm text-gray-500 dark:text-gray-400 mb-3 block">
            {post.data.pubDate.toLocaleDateString('es-ES', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })}
          </time>
          {post.data.description && (
            <p class="text-gray-600 dark:text-gray-300 mb-4">
              {post.data.description}
            </p>
          )}
        </article>
      ))}
    </div>

    <nav class="text-center mt-12">
      <a 
        href="/categorias/" 
        class="inline-flex items-center text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 transition-colors"
      >
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
        Ver todas las categorías
      </a>
    </nav>
  </div>
</Layout>