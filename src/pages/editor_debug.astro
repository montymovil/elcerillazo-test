---
if (import.meta.env.PROD) {
  return Astro.redirect('/');
}
---

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Editor Debug - El Cerillazo</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/marked/marked.min.js"></script>
  <style>
    .drop-zone {
      transition: all 0.3s ease;
    }
    .drop-zone.drag-over {
      border-color: #3b82f6;
      background-color: #eff6ff;
    }
    .glass {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }
    #debugInfo {
      font-family: 'Courier New', monospace;
      font-size: 12px;
      max-height: 200px;
      overflow-y: auto;
    }
  </style>
</head>
<body class="bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen">
  <div class="container mx-auto px-4 py-6">
    <div class="max-w-4xl mx-auto">
      
      <!-- Header -->
      <div class="glass rounded-xl shadow-sm p-6 mb-6">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              üêõ Debug Cloudinary
            </h1>
            <p class="text-gray-600 mt-1">Vamos a encontrar el problema</p>
          </div>
          <button id="clearDebug" class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors">
            Limpiar Debug
          </button>
        </div>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        
        <!-- Panel de prueba -->
        <div class="glass rounded-xl shadow-sm">
          <div class="p-4 border-b border-gray-200">
            <h3 class="font-semibold text-gray-800 flex items-center gap-2">
              <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
              Prueba de Upload
            </h3>
          </div>
          <div class="p-4">
            
            <!-- Configuraci√≥n actual -->
            <div class="mb-4 p-3 bg-blue-50 rounded-lg">
              <h4 class="font-medium text-blue-800 mb-2">Configuraci√≥n actual:</h4>
              <div class="text-sm text-blue-700 space-y-1">
                <div><strong>Cloud Name:</strong> <code>decis3u78</code></div>
                <div><strong>Upload Preset:</strong> <code>blog-images</code></div>
                <div><strong>Folder:</strong> <code>blog-posts</code></div>
                <div><strong>URL:</strong> <code>https://api.cloudinary.com/v1_1/decis3u78/image/upload</code></div>
              </div>
            </div>
            
            <!-- Test b√°sico -->
            <button id="testConfig" class="w-full mb-4 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors">
              üß™ Test 1: Verificar configuraci√≥n
            </button>
            
            <!-- Drop zone -->
            <div id="dropZone" class="drop-zone border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-blue-400 transition-all">
              <svg class="mx-auto h-8 w-8 text-gray-400 mb-2" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
              <p class="text-sm text-gray-600">üîß Arrastra imagen para debug</p>
              <p class="text-xs text-gray-400 mt-1">O haz clic para seleccionar</p>
              <input type="file" id="imageFile" accept="image/*" class="hidden">
            </div>
            
            <!-- Status -->
            <div id="uploadStatus" class="mt-4 p-3 bg-gray-50 rounded-lg hidden">
              <h4 class="font-medium text-gray-800 mb-2">Estado del upload:</h4>
              <div id="statusContent" class="text-sm text-gray-700"></div>
            </div>
            
            <!-- Imagen de resultado -->
            <div id="imageResult" class="mt-4 hidden">
              <h4 class="font-medium text-gray-800 mb-2">Resultado:</h4>
              <img id="resultImg" class="w-full h-32 object-cover rounded-lg mb-2">
              <div id="imageInfo" class="text-xs text-gray-600"></div>
            </div>
          </div>
        </div>

        <!-- Panel de debug -->
        <div class="glass rounded-xl shadow-sm">
          <div class="p-4 border-b border-gray-200">
            <h3 class="font-semibold text-gray-800 flex items-center gap-2">
              <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
              Debug Log
            </h3>
          </div>
          <div class="p-4">
            <div id="debugInfo" class="bg-black text-green-400 p-3 rounded-lg min-h-[300px]">
              <div class="text-yellow-400">üü° Editor de debug iniciado...</div>
              <div class="text-blue-400">üîµ Cloudinary config cargada</div>
              <div class="text-gray-400">‚ö™ Esperando acci√≥n del usuario...</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Panel de tests adicionales -->
      <div class="mt-6 glass rounded-xl shadow-sm">
        <div class="p-4 border-b border-gray-200">
          <h3 class="font-semibold text-gray-800">Tests adicionales</h3>
        </div>
        <div class="p-4 grid grid-cols-1 md:grid-cols-3 gap-4">
          <button id="testCors" class="bg-yellow-600 text-white py-2 px-4 rounded-lg hover:bg-yellow-700 transition-colors">
            üåê Test CORS
          </button>
          <button id="testPreset" class="bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition-colors">
            ‚öôÔ∏è Test Preset
          </button>
          <button id="testDummyUpload" class="bg-purple-600 text-white py-2 px-4 rounded-lg hover:bg-purple-700 transition-colors">
            üì§ Test Dummy Upload
          </button>
        </div>
      </div>
    </div>
  </div>

  <script>
    // ========================================
    // CONFIGURACI√ìN Y VARIABLES
    // ========================================
    
    const CLOUDINARY_CONFIG = {
      cloudName: 'decis3u78',
      uploadPreset: 'blog-images',
      folder: 'blog-posts',
      uploadUrl: 'https://api.cloudinary.com/v1_1/decis3u78/image/upload'
    };

    const debugLog = document.getElementById('debugInfo');
    const dropZone = document.getElementById('dropZone');
    const imageFile = document.getElementById('imageFile');
    const uploadStatus = document.getElementById('uploadStatus');
    const statusContent = document.getElementById('statusContent');
    const imageResult = document.getElementById('imageResult');
    const resultImg = document.getElementById('resultImg');
    const imageInfo = document.getElementById('imageInfo');

    // ========================================
    // FUNCIONES DE DEBUG
    // ========================================
    
    function log(message, type = 'info') {
      const timestamp = new Date().toLocaleTimeString();
      const colors = {
        info: 'text-blue-400',
        success: 'text-green-400', 
        error: 'text-red-400',
        warning: 'text-yellow-400',
        debug: 'text-gray-400'
      };
      
      const colorClass = colors[type] || 'text-white';
      const emoji = {
        info: 'üîµ',
        success: 'üü¢', 
        error: 'üî¥',
        warning: 'üü°',
        debug: '‚ö™'
      }[type] || '‚ÑπÔ∏è';
      
      debugLog.innerHTML += `<div class="${colorClass}">${emoji} [${timestamp}] ${message}</div>`;
      debugLog.scrollTop = debugLog.scrollHeight;
    }

    function showStatus(message, type = 'info') {
      uploadStatus.classList.remove('hidden');
      statusContent.innerHTML = `<span class="inline-flex items-center gap-2">
        <div class="w-2 h-2 rounded-full bg-${type === 'error' ? 'red' : type === 'success' ? 'green' : 'blue'}-500"></div>
        ${message}
      </span>`;
    }

    // ========================================
    // TESTS DE CONFIGURACI√ìN
    // ========================================
    
    document.getElementById('testConfig').addEventListener('click', async () => {
      log('üß™ Iniciando test de configuraci√≥n...', 'info');
      
      // Test 1: Verificar cloud name
      log(`Cloud Name: ${CLOUDINARY_CONFIG.cloudName}`, 'debug');
      
      // Test 2: Verificar URL de upload
      log(`Upload URL: ${CLOUDINARY_CONFIG.uploadUrl}`, 'debug');
      
      // Test 3: Ping a Cloudinary
      try {
        showStatus('Verificando conexi√≥n a Cloudinary...', 'info');
        const response = await fetch(`https://res.cloudinary.com/${CLOUDINARY_CONFIG.cloudName}/image/upload`, {
          method: 'OPTIONS'
        });
        log(`‚úÖ Cloudinary responde: ${response.status}`, 'success');
        showStatus('Conexi√≥n a Cloudinary OK', 'success');
      } catch (error) {
        log(`‚ùå Error de conexi√≥n: ${error.message}`, 'error');
        showStatus('Error de conexi√≥n a Cloudinary', 'error');
      }
    });

    // ========================================
    // TEST DE UPLOAD PRINCIPAL
    // ========================================
    
    async function uploadToCloudinary(file) {
      log(`üìÅ Archivo seleccionado: ${file.name} (${file.size} bytes)`, 'info');
      log(`üìÅ Tipo: ${file.type}`, 'debug');
      
      // Validaciones
      if (!file.type.startsWith('image/')) {
        throw new Error('El archivo no es una imagen');
      }
      
      if (file.size > 10 * 1024 * 1024) {
        throw new Error('Archivo demasiado grande (m√°ximo 10MB)');
      }
      
      // Preparar FormData
      const formData = new FormData();
      formData.append('file', file);
      formData.append('upload_preset', CLOUDINARY_CONFIG.uploadPreset);
      formData.append('folder', CLOUDINARY_CONFIG.folder);
      
      log(`üì§ Enviando a: ${CLOUDINARY_CONFIG.uploadUrl}`, 'info');
      log(`üì§ Upload preset: ${CLOUDINARY_CONFIG.uploadPreset}`, 'debug');
      log(`üì§ Folder: ${CLOUDINARY_CONFIG.folder}`, 'debug');
      
      // Enviar request
      const response = await fetch(CLOUDINARY_CONFIG.uploadUrl, {
        method: 'POST',
        body: formData
      });
      
      log(`üì• Response status: ${response.status}`, response.ok ? 'success' : 'error');
      log(`üì• Response headers: ${JSON.stringify([...response.headers.entries()])}`, 'debug');
      
      if (!response.ok) {
        const errorText = await response.text();
        log(`‚ùå Error response: ${errorText}`, 'error');
        throw new Error(`Upload failed: ${response.status} - ${errorText}`);
      }
      
      const data = await response.json();
      log(`‚úÖ Upload exitoso: ${data.secure_url}`, 'success');
      log(`üìä Detalles: ${JSON.stringify(data, null, 2)}`, 'debug');
      
      return data;
    }

    async function handleFileUpload(file) {
      try {
        showStatus('Iniciando upload...', 'info');
        dropZone.innerHTML = `
          <div class="text-center">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2"></div>
            <p class="text-sm text-blue-600">Subiendo a Cloudinary...</p>
          </div>
        `;
        
        const result = await uploadToCloudinary(file);
        
        // Mostrar resultado
        showStatus('Upload completado exitosamente', 'success');
        imageResult.classList.remove('hidden');
        resultImg.src = result.secure_url;
        imageInfo.textContent = `URL: ${result.secure_url} | Size: ${result.width}x${result.height} | Format: ${result.format}`;
        
        // Restaurar drop zone
        setTimeout(() => {
          dropZone.innerHTML = `
            <svg class="mx-auto h-8 w-8 text-green-500 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            <p class="text-sm text-green-600">¬°Upload exitoso!</p>
            <p class="text-xs text-gray-400 mt-1">Arrastra otra imagen para probar de nuevo</p>
          `;
        }, 1000);
        
      } catch (error) {
        log(`‚ùå Error en upload: ${error.message}`, 'error');
        showStatus(`Error: ${error.message}`, 'error');
        
        dropZone.innerHTML = `
          <div class="text-center">
            <svg class="mx-auto h-8 w-8 text-red-500 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
            <p class="text-sm text-red-600">Error en upload</p>
            <p class="text-xs text-red-500">${error.message}</p>
            <button onclick="location.reload()" class="mt-2 text-xs text-blue-600 underline">Reintentar</button>
          </div>
        `;
      }
    }

    // ========================================
    // EVENTOS
    // ========================================
    
    // Drag & Drop
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropZone.addEventListener(eventName, e => {
        e.preventDefault();
        e.stopPropagation();
      });
    });
    
    ['dragenter', 'dragover'].forEach(eventName => {
      dropZone.addEventListener(eventName, () => {
        dropZone.classList.add('drag-over');
      });
    });
    
    ['dragleave', 'drop'].forEach(eventName => {
      dropZone.addEventListener(eventName, () => {
        dropZone.classList.remove('drag-over');
      });
    });
    
    dropZone.addEventListener('drop', (e) => {
      const files = e.dataTransfer.files;
      if (files.length > 0) {
        log(`üéØ Archivo arrastrado: ${files[0].name}`, 'info');
        handleFileUpload(files[0]);
      }
    });
    
    dropZone.addEventListener('click', () => {
      imageFile.click();
    });
    
    imageFile.addEventListener('change', (e) => {
      if (e.target.files.length > 0) {
        log(`üéØ Archivo seleccionado: ${e.target.files[0].name}`, 'info');
        handleFileUpload(e.target.files[0]);
      }
    });

    // ========================================
    // TESTS ADICIONALES
    // ========================================
    
    document.getElementById('testCors').addEventListener('click', async () => {
      log('üåê Testing CORS...', 'info');
      try {
        const response = await fetch(CLOUDINARY_CONFIG.uploadUrl, {
          method: 'OPTIONS'
        });
        log(`‚úÖ CORS OK: ${response.status}`, 'success');
      } catch (error) {
        log(`‚ùå CORS Error: ${error.message}`, 'error');
      }
    });

    document.getElementById('testPreset').addEventListener('click', async () => {
      log('‚öôÔ∏è Testing upload preset...', 'info');
      
      // Crear un FormData con datos m√≠nimos para test
      const formData = new FormData();
      formData.append('upload_preset', CLOUDINARY_CONFIG.uploadPreset);
      formData.append('folder', CLOUDINARY_CONFIG.folder);
      
      try {
        const response = await fetch(CLOUDINARY_CONFIG.uploadUrl, {
          method: 'POST',
          body: formData
        });
        
        const text = await response.text();
        log(`Preset test response: ${response.status}`, response.ok ? 'success' : 'warning');
        log(`Response body: ${text.substring(0, 200)}...`, 'debug');
        
      } catch (error) {
        log(`‚ùå Preset test error: ${error.message}`, 'error');
      }
    });

    document.getElementById('testDummyUpload').addEventListener('click', async () => {
      log('üì§ Creating dummy image for test...', 'info');
      
      // Crear una imagen dummy usando Canvas
      const canvas = document.createElement('canvas');
      canvas.width = 100;
      canvas.height = 100;
      const ctx = canvas.getContext('2d');
      
      // Dibujar algo simple
      ctx.fillStyle = '#3B82F6';
      ctx.fillRect(0, 0, 100, 100);
      ctx.fillStyle = 'white';
      ctx.font = '16px Arial';
      ctx.fillText('TEST', 30, 55);
      
      canvas.toBlob(async (blob) => {
        if (blob) {
          const file = new File([blob], 'test-image.png', { type: 'image/png' });
          log(`üñºÔ∏è Dummy image created: ${file.size} bytes`, 'info');
          await handleFileUpload(file);
        }
      });
    });

    // Limpiar debug
    document.getElementById('clearDebug').addEventListener('click', () => {
      debugLog.innerHTML = '<div class="text-yellow-400">üü° Debug log limpiado...</div>';
      uploadStatus.classList.add('hidden');
      imageResult.classList.add('hidden');
    });

    // ========================================
    // INICIALIZACI√ìN
    // ========================================
    
    log('üöÄ Debug editor cargado', 'success');
    log(`üìã Configuraci√≥n: Cloud=${CLOUDINARY_CONFIG.cloudName}, Preset=${CLOUDINARY_CONFIG.uploadPreset}`, 'info');
  </script>
</body>
</html>