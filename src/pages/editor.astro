---
// Protección del editor en producción
if (import.meta.env.PROD) {
  const url = new URL(Astro.request.url);
  const password = url.searchParams.get('password');
  const correctPassword = import.meta.env.EDITOR_PASSWORD || 'test123';
  
  if (password !== correctPassword) {
    return new Response(`
<!DOCTYPE html>
<html>
<head>
  <title>Acceso restringido</title>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 min-h-screen flex items-center justify-center">
  <div class="max-w-md w-full bg-white rounded-lg shadow-lg p-8">
    <h1 class="text-2xl font-bold text-gray-800 text-center mb-6">Acceso restringido</h1>
    <form id="passwordForm" class="space-y-4">
      <input type="password" id="password" placeholder="Contraseña" class="w-full px-3 py-2 border rounded-lg" autofocus>
      <button type="submit" class="w-full bg-blue-600 text-white py-2 rounded-lg">Acceder</button>
    </form>
  </div>
  <script>
    document.getElementById('passwordForm').addEventListener('submit', function(e) {
      e.preventDefault();
      const password = document.getElementById('password').value;
      const currentUrl = new URL(window.location);
      currentUrl.searchParams.set('password', password);
      window.location.href = currentUrl.toString();
    });
  </script>
</body>
</html>
    `, {
      status: 401,
      headers: { 'Content-Type': 'text/html; charset=utf-8' }
    });
  }
}
---

<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Editor - El Cerillazo</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/marked/marked.min.js"></script>
</head>
<body class="bg-gray-50 min-h-screen">
  <div class="container mx-auto px-4 py-6 max-w-6xl">
    
    <div class="bg-white rounded-lg shadow p-6 mb-6">
      <h1 class="text-2xl font-bold text-gray-800">Editor de Posts</h1>
      <p class="text-gray-600">Con Cloudinary integrado</p>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
      
      <div class="space-y-6">
        
        <div class="bg-white rounded-lg shadow p-6">
          <h3 class="font-semibold mb-4">Información básica</h3>
          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium mb-2">Título</label>
              <input type="text" id="title" class="w-full px-3 py-2 border rounded-lg">
            </div>
            <div>
              <label class="block text-sm font-medium mb-2">Descripción</label>
              <textarea id="description" rows="3" class="w-full px-3 py-2 border rounded-lg resize-none"></textarea>
            </div>
            <div>
              <label class="block text-sm font-medium mb-2">Categoría</label>
              <select id="category" class="w-full px-3 py-2 border rounded-lg">
                <option value="">Seleccionar...</option>
                <option value="cerillazos">cerillazos</option>
                <option value="Inspiracion">Inspiracion</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium mb-2">Tags</label>
              <input type="text" id="tags" placeholder="tecnología, reflexión, vida" class="w-full px-3 py-2 border rounded-lg">
            </div>
          </div>
        </div>
        
        <div class="bg-white rounded-lg shadow p-6">
          <h3 class="font-semibold mb-4">Imagen destacada</h3>
          <div id="dropZone" class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-blue-400 transition-colors">
            <div id="dropContent">
              <svg class="mx-auto h-8 w-8 text-gray-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"></path>
              </svg>
              <p class="text-sm text-gray-600">Arrastra imagen o haz clic</p>
            </div>
            <input type="file" id="imageFile" accept="image/*" class="hidden">
          </div>
          <input type="url" id="imageUrl" placeholder="O pega una URL" class="w-full px-3 py-2 border rounded-lg text-sm mt-3">
          <div id="imagePreview" class="hidden mt-3">
            <img id="previewImg" class="w-full h-32 object-cover rounded-lg">
            <button id="removeImage" class="mt-2 text-red-600 text-sm">Eliminar</button>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <button id="generateBtn" class="w-full bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 transition-colors font-medium mb-3">
            Generar Post
          </button>
          <button id="clearBtn" class="w-full bg-gray-500 text-white py-2 rounded-lg hover:bg-gray-600 transition-colors">
            Limpiar
          </button>
        </div>
      </div>

      <div class="space-y-6">
        
        <div class="bg-white rounded-lg shadow flex flex-col h-96">
          <div class="p-4 border-b">
            <h3 class="font-semibold">Editor Markdown</h3>
          </div>
          <textarea id="content" class="flex-1 p-4 border-0 resize-none focus:ring-0 font-mono text-sm" placeholder="## Mi nuevo post

Escribe aquí tu contenido en **Markdown**..."></textarea>
        </div>

        <div class="bg-white rounded-lg shadow flex flex-col h-96">
          <div class="p-4 border-b">
            <h3 class="font-semibold">Vista previa</h3>
          </div>
          <div id="preview" class="flex-1 p-4 overflow-y-auto">
            <div class="text-gray-500 italic text-center py-8">
              La vista previa aparecerá aquí
            </div>
          </div>
        </div>
      </div>
    </div>

    <div id="outputSection" class="mt-6 bg-white rounded-lg shadow hidden">
      <div class="p-6">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-xl font-semibold">Archivo generado</h2>
          <div class="flex gap-3">
            <button id="copyBtn" class="bg-green-600 text-white px-4 py-2 rounded-lg">Copiar</button>
            <button id="downloadBtn" class="bg-blue-600 text-white px-4 py-2 rounded-lg">Descargar</button>
          </div>
        </div>
        <pre id="output" class="bg-gray-900 text-green-400 text-sm overflow-auto h-64 p-4 rounded-lg"></pre>
      </div>
    </div>
  </div>

  <script>
    const CLOUDINARY_CONFIG = {
      cloudName: 'decis3u78',
      uploadPreset: 'blog-images',
      uploadUrl: 'https://api.cloudinary.com/v1_1/decis3u78/image/upload'
    };

    let currentImage = null;

    const titleEl = document.getElementById('title');
    const descriptionEl = document.getElementById('description');
    const categoryEl = document.getElementById('category');
    const tagsEl = document.getElementById('tags');
    const imageUrlEl = document.getElementById('imageUrl');
    const imageFileEl = document.getElementById('imageFile');
    const contentEl = document.getElementById('content');
    const previewEl = document.getElementById('preview');
    const outputEl = document.getElementById('output');
    const outputSectionEl = document.getElementById('outputSection');
    const dropZoneEl = document.getElementById('dropZone');
    const dropContentEl = document.getElementById('dropContent');
    const imagePreviewEl = document.getElementById('imagePreview');
    const previewImgEl = document.getElementById('previewImg');

    async function uploadToCloudinary(file) {
      if (!file.type.startsWith('image/')) {
        throw new Error('Solo se permiten imágenes');
      }

      const formData = new FormData();
      formData.append('file', file);
      formData.append('upload_preset', CLOUDINARY_CONFIG.uploadPreset);
      formData.append('folder', 'blog-posts');

      const response = await fetch(CLOUDINARY_CONFIG.uploadUrl, {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        throw new Error('Error al subir imagen');
      }

      return await response.json();
    }

    async function handleFiles(files) {
      if (files.length === 0) return;

      const file = files[0];
      
      dropContentEl.innerHTML = '<div class="text-center"><div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2"></div><p class="text-sm text-blue-600">Subiendo...</p></div>';

      try {
        const result = await uploadToCloudinary(file);
        
        currentImage = result.secure_url;
        imageUrlEl.value = result.secure_url;
        showImagePreview(result.secure_url);
        
        dropContentEl.innerHTML = '<div class="text-center"><svg class="mx-auto h-8 w-8 text-green-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg><p class="text-sm text-green-600">Subida exitosa</p></div>';
        
        setTimeout(resetDropZone, 2000);
        
      } catch (error) {
        console.error('Error:', error);
        dropContentEl.innerHTML = '<div class="text-center"><p class="text-sm text-red-600">Error al subir</p></div>';
        setTimeout(resetDropZone, 3000);
      }
    }

    function showImagePreview(url) {
      previewImgEl.src = url;
      imagePreviewEl.classList.remove('hidden');
    }

    function resetDropZone() {
      dropContentEl.innerHTML = '<svg class="mx-auto h-8 w-8 text-gray-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"></path></svg><p class="text-sm text-gray-600">Arrastra imagen o haz clic</p>';
    }

    function updatePreview() {
      const markdown = contentEl.value;
      if (markdown.trim() && typeof marked !== 'undefined') {
        previewEl.innerHTML = marked.parse(markdown);
      } else {
        previewEl.innerHTML = '<div class="text-gray-500 italic text-center py-8">La vista previa aparecerá aquí</div>';
      }
    }

    function generateSlug(title) {
      return title.toLowerCase().replace(/[áàäâã]/g, 'a').replace(/[éèëê]/g, 'e').replace(/[íìïî]/g, 'i').replace(/[óòöôõ]/g, 'o').replace(/[úùüû]/g, 'u').replace(/[ñ]/g, 'n').replace(/[^a-z0-9]+/g, '-').replace(/^-|-$/g, '');
    }

    function generatePost() {
      const title = titleEl.value.trim();
      const content = contentEl.value.trim();

      if (!title || !content) {
        alert('El título y contenido son obligatorios');
        return;
      }

      const now = new Date();
      const isoDate = now.toISOString();
      const dateStr = now.toISOString().split('T')[0];
      const slug = generateSlug(title);

      let frontmatter = `---\ntitle: "${title}"\npubDate: ${isoDate}`;

      if (descriptionEl.value.trim()) {
        frontmatter += `\ndescription: "${descriptionEl.value.trim()}"`;
      }

      if (currentImage) {
        frontmatter += `\nimage: "${currentImage}"`;
      }

      if (categoryEl.value) {
        frontmatter += `\ncategories:\n  - "${categoryEl.value}"`;
      }

      if (tagsEl.value.trim()) {
        const tagList = tagsEl.value.split(',').map(tag => tag.trim()).filter(tag => tag);
        if (tagList.length > 0) {
          frontmatter += '\ntags:';
          tagList.forEach(tag => frontmatter += `\n  - "${tag}"`);
        }
      }

      frontmatter += '\ndraft: false\n---\n\n';

      const finalContent = frontmatter + content;

      outputEl.textContent = finalContent;
      outputSectionEl.classList.remove('hidden');
      outputSectionEl.scrollIntoView({ behavior: 'smooth' });
    }

    contentEl.addEventListener('input', updatePreview);

    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropZoneEl.addEventListener(eventName, e => {
        e.preventDefault();
        e.stopPropagation();
      });
    });

    dropZoneEl.addEventListener('drop', (e) => {
      const files = e.dataTransfer.files;
      handleFiles(files);
    });

    dropZoneEl.addEventListener('click', () => {
      imageFileEl.click();
    });

    imageFileEl.addEventListener('change', (e) => {
      handleFiles(e.target.files);
    });

    imageUrlEl.addEventListener('input', function() {
      if (this.value) {
        showImagePreview(this.value);
        currentImage = this.value;
      }
    });

    document.getElementById('removeImage').addEventListener('click', function() {
      imagePreviewEl.classList.add('hidden');
      imageUrlEl.value = '';
      imageFileEl.value = '';
      currentImage = null;
    });

    document.getElementById('generateBtn').addEventListener('click', generatePost);

    document.getElementById('clearBtn').addEventListener('click', function() {
      if (confirm('¿Limpiar todo?')) {
        titleEl.value = '';
        descriptionEl.value = '';
        categoryEl.value = '';
        tagsEl.value = '';
        imageUrlEl.value = '';
        contentEl.value = '';
        currentImage = null;
        imagePreviewEl.classList.add('hidden');
        updatePreview();
      }
    });

    document.getElementById('copyBtn').addEventListener('click', function() {
      navigator.clipboard.writeText(outputEl.textContent).then(() => {
        this.textContent = 'Copiado';
        setTimeout(() => this.textContent = 'Copiar', 2000);
      });
    });

    document.getElementById('downloadBtn').addEventListener('click', function() {
      const content = outputEl.textContent;
      const blob = new Blob([content], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'post.md';
      a.click();
      URL.revokeObjectURL(url);
    });
  </script>
</body>
</html>