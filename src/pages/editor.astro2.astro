---
if (import.meta.env.PROD) {
  return Astro.redirect('/');
}
---

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Editor - El Cerillazo</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/marked/marked.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
  <style>
    .preview-content h1, .preview-content h2, .preview-content h3 {
      margin-top: 1.5rem;
      margin-bottom: 0.5rem;
      font-weight: bold;
    }
    .preview-content h1 { font-size: 2rem; }
    .preview-content h2 { font-size: 1.5rem; }
    .preview-content h3 { font-size: 1.25rem; }
    .preview-content p { margin-bottom: 1rem; line-height: 1.6; }
    .preview-content ul, .preview-content ol { margin-bottom: 1rem; padding-left: 2rem; }
    .preview-content blockquote { 
      border-left: 4px solid #3b82f6; 
      padding-left: 1rem; 
      margin: 1rem 0; 
      background: #f8fafc; 
      padding: 1rem;
      border-radius: 0.5rem;
    }
    .preview-content code { 
      background: #f1f5f9; 
      padding: 0.25rem 0.5rem; 
      border-radius: 0.25rem; 
      font-family: 'Courier New', monospace;
    }
    .preview-content pre { 
      background: #1e293b; 
      color: #e2e8f0; 
      padding: 1rem; 
      border-radius: 0.5rem; 
      overflow-x: auto; 
      margin: 1rem 0;
    }
    .drop-zone {
      transition: all 0.3s ease;
    }
    .drop-zone.drag-over {
      border-color: #3b82f6;
      background-color: #eff6ff;
    }
    .drop-zone.uploading {
      border-color: #f59e0b;
      background-color: #fef3c7;
    }
    .drop-zone.success {
      border-color: #10b981;
      background-color: #d1fae5;
    }
    .drop-zone.error {
      border-color: #ef4444;
      background-color: #fee2e2;
    }
    .glass {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }
    .editor-toolbar {
      border-bottom: 1px solid #e5e7eb;
    }
    .upload-progress {
      background: linear-gradient(90deg, #3b82f6 0%, #1d4ed8 100%);
      transition: width 0.3s ease;
    }
  </style>
</head>
<body class="bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen">
  <div class="container mx-auto px-4 py-6">
    <div class="max-w-7xl mx-auto">
      
      <!-- Header mejorado -->
      <div class="glass rounded-xl shadow-sm p-6 mb-6">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              Editor de Posts
            </h1>
            <p class="text-gray-600 mt-1">Crea contenido para El Cerillazo</p>
          </div>
          <div class="flex gap-3">
            <button id="saveBtn" class="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors shadow-sm">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3-3m0 0l-3 3m3-3v12"></path>
              </svg>
              Guardar
            </button>
            <button id="loadBtn" class="flex items-center gap-2 bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors shadow-sm">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"></path>
              </svg>
              Cargar
            </button>
          </div>
        </div>
      </div>

      <div class="grid grid-cols-1 xl:grid-cols-12 gap-6">
        
        <!-- Sidebar izquierdo - Metadatos -->
        <div class="xl:col-span-3 space-y-6">
          
          <!-- Metadatos principales -->
          <div class="glass rounded-xl shadow-sm">
            <div class="p-4 border-b border-gray-200">
              <h3 class="font-semibold text-gray-800 flex items-center gap-2">
                <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                Información básica
              </h3>
            </div>
            <div class="p-4 space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Título</label>
                <input type="text" id="title" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors">
                <div class="text-xs text-gray-500 mt-1">
                  Slug: <span id="slugPreview" class="font-mono bg-gray-100 px-1 rounded">-</span>
                </div>
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Descripción</label>
                <textarea id="description" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 resize-none"></textarea>
                <div class="flex justify-between text-xs text-gray-500 mt-1">
                  <span>Para SEO y redes sociales</span>
                  <span id="descCount">0</span>/160
                </div>
              </div>
            </div>
          </div>
          
          <!-- Taxonomías -->
          <div class="glass rounded-xl shadow-sm">
            <div class="p-4 border-b border-gray-200">
              <h3 class="font-semibold text-gray-800 flex items-center gap-2">
                <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.99 1.99 0 013 12V7a4 4 0 014-4z"></path>
                </svg>
                Clasificación
              </h3>
            </div>
            <div class="p-4 space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Categoría</label>
                <select id="category" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                  <option value="">Seleccionar...</option>
                  <option value="cerillazos">cerillazos</option>
                  <option value="Inspiracion">Inspiracion</option>
                </select>
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Tags</label>
                <input type="text" id="tags" placeholder="tecnología, reflexión, vida" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                <div class="text-xs text-gray-500 mt-1">Separados por comas</div>
              </div>
            </div>
          </div>
          
          <!-- Imagen con Cloudinary -->
          <div class="glass rounded-xl shadow-sm">
            <div class="p-4 border-b border-gray-200">
              <h3 class="font-semibold text-gray-800 flex items-center gap-2">
                <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                Imagen destacada
                <span class="text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full ml-auto">Cloudinary</span>
              </h3>
            </div>
            <div class="p-4">
              <div id="dropZone" class="drop-zone border-2 border-dashed border-gray-300 rounded-lg p-4 text-center cursor-pointer hover:border-blue-400 transition-all">
                <div id="dropZoneContent">
                  <svg class="mx-auto h-8 w-8 text-gray-400 mb-2" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                    <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  </svg>
                  <p class="text-sm text-gray-600">Arrastra imagen o haz clic</p>
                  <p class="text-xs text-gray-400 mt-1">Se subirá automáticamente a Cloudinary</p>
                </div>
                <input type="file" id="imageFile" accept="image/*" class="hidden">
              </div>
              
              <!-- Barra de progreso -->
              <div id="uploadProgress" class="hidden mt-3">
                <div class="w-full bg-gray-200 rounded-full h-2">
                  <div id="progressBar" class="upload-progress h-2 rounded-full" style="width: 0%"></div>
                </div>
                <p id="uploadStatus" class="text-xs text-gray-600 mt-1">Preparando subida...</p>
              </div>
              
              <div class="relative mt-3">
                <input type="url" id="imageUrl" placeholder="O pega una URL directamente" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 text-sm">
                <div class="text-xs text-gray-400 mt-1">
                  <span class="inline-flex items-center gap-1">
                    <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                    </svg>
                    URLs de Cloudinary se optimizan automáticamente
                  </div>
                </div>
              </div>
              
              <div id="imagePreview" class="hidden mt-3">
                <img id="previewImg" class="w-full h-32 object-cover rounded-lg">
                <div class="mt-2 flex justify-between items-center">
                  <span id="imageInfo" class="text-xs text-gray-500"></span>
                  <button id="removeImage" class="text-red-600 text-sm hover:text-red-800 flex items-center gap-1">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                    </svg>
                    Eliminar
                  </button>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Acciones -->
          <div class="glass rounded-xl shadow-sm">
            <div class="p-4 space-y-3">
              <button id="generateBtn" class="w-full bg-gradient-to-r from-green-600 to-green-700 text-white py-3 rounded-lg hover:from-green-700 hover:to-green-800 transition-all shadow-sm font-medium">
                Generar Post
              </button>
              <button id="clearBtn" class="w-full bg-gray-500 text-white py-2 rounded-lg hover:bg-gray-600 transition-colors">
                Limpiar todo
              </button>
            </div>
          </div>
        </div>

        <!-- Editor central -->
        <div class="xl:col-span-5">
          <div class="glass rounded-xl shadow-sm h-full flex flex-col">
            <!-- Toolbar del editor -->
            <div class="editor-toolbar p-4 flex justify-between items-center">
              <h3 class="font-semibold text-gray-800 flex items-center gap-2">
                <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
                Editor Markdown
              </h3>
              <div class="flex gap-2">
                <button id="insertImage" class="text-gray-600 hover:text-gray-800 px-2 py-1 text-sm rounded hover:bg-gray-100 transition-colors">
                  <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                  Imagen
                </button>
                <button id="insertLink" class="text-gray-600 hover:text-gray-800 px-2 py-1 text-sm rounded hover:bg-gray-100 transition-colors">
                  <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
                  </svg>
                  Link
                </button>
                <button id="insertCode" class="text-gray-600 hover:text-gray-800 px-2 py-1 text-sm rounded hover:bg-gray-100 transition-colors">
                  <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"></path>
                  </svg>
                  Código
                </button>
              </div>
            </div>
            
            <!-- Área de texto -->
            <textarea id="content" class="flex-1 w-full p-4 border-0 resize-none focus:ring-0 font-mono text-sm leading-relaxed" placeholder="## Mi nuevo post

Escribe aquí tu contenido en **Markdown**...

### Ejemplo de uso:

- Lista de elementos
- Otro elemento

```javascript
// Bloque de código
console.log('Hola mundo');
```

> Cita importante

[Enlace](https://ejemplo.com) y texto normal."></textarea>
          </div>
        </div>

        <!-- Preview -->
        <div class="xl:col-span-4">
          <div class="glass rounded-xl shadow-sm h-full flex flex-col">
            <div class="p-4 border-b border-gray-200">
              <h3 class="font-semibold text-gray-800 flex items-center gap-2">
                <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                </svg>
                Vista previa
              </h3>
            </div>
            <div id="preview" class="flex-1 p-4 overflow-y-auto preview-content">
              <div class="text-gray-500 italic text-center py-8">
                <svg class="w-12 h-12 mx-auto mb-3 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                </svg>
                La vista previa aparecerá aquí mientras escribes
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Resultado generado -->
      <div id="outputSection" class="mt-6 glass rounded-xl shadow-lg hidden">
        <div class="p-6">
          <div class="flex justify-between items-center mb-6">
            <div>
              <h2 class="text-xl font-semibold text-gray-800">Archivo generado</h2>
              <p class="text-gray-600 text-sm mt-1">
                Archivo: <span id="filename" class="font-mono bg-gray-100 px-2 py-1 rounded"></span>
              </p>
            </div>
            <div class="flex gap-3">
              <button id="copyBtn" class="flex items-center gap-2 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                </svg>
                Copiar
              </button>
              <button id="downloadBtn" class="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                Descargar
              </button>
            </div>
          </div>
          <pre id="output" class="text-green-400 text-sm overflow-auto h-64 bg-gray-900 p-4 rounded-lg border"></pre>
          <div class="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <h4 class="font-semibold text-blue-800 mb-2">Instrucciones:</h4>
            <ol class="text-blue-700 text-sm space-y-1">
              <li>1. Copia el contenido generado usando el botón "Copiar"</li>
              <li>2. Crea un nuevo archivo .md en la carpeta <code class="bg-blue-100 px-1 rounded">src/content/blog/</code></li>
              <li>3. Pega el contenido en el archivo y guárdalo</li>
              <li>4. El post aparecerá automáticamente en tu blog</li>
            </ol>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // ========================================
    // CONFIGURACIÓN DE CLOUDINARY
    // ========================================
    const CLOUDINARY_CONFIG = {
      cloudName: 'decis3u78', // Tu cloud name
      uploadPreset: 'blog-images', // Crear este preset en Cloudinary Dashboard
      folder: 'blog-posts'
    };

    // ========================================
    // ELEMENTOS DEL DOM
    // ========================================
    let currentImage = null;
    
    const elements = {
      title: document.getElementById('title'),
      description: document.getElementById('description'),
      category: document.getElementById('category'),
      tags: document.getElementById('tags'),
      imageUrl: document.getElementById('imageUrl'),
      imageFile: document.getElementById('imageFile'),
      content: document.getElementById('content'),
      preview: document.getElementById('preview'),
      output: document.getElementById('output'),
      outputSection: document.getElementById('outputSection'),
      dropZone: document.getElementById('dropZone'),
      dropZoneContent: document.getElementById('dropZoneContent'),
      uploadProgress: document.getElementById('uploadProgress'),
      progressBar: document.getElementById('progressBar'),
      uploadStatus: document.getElementById('uploadStatus'),
      imagePreview: document.getElementById('imagePreview'),
      previewImg: document.getElementById('previewImg'),
      imageInfo: document.getElementById('imageInfo')
    };

    // ========================================
    // FUNCIONES DE CLOUDINARY
    // ========================================
    
    async function uploadToCloudinary(file) {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('upload_preset', CLOUDINARY_CONFIG.uploadPreset);
      formData.append('folder', CLOUDINARY_CONFIG.folder);
      
      // Parámetros de optimización automática
      formData.append('transformation', 'f_auto,q_auto');
      
      try {
        const response = await fetch(
          `https://api.cloudinary.com/v1_1/${CLOUDINARY_CONFIG.cloudName}/image/upload`,
          {
            method: 'POST',
            body: formData
          }
        );
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.secure_url) {
          return {
            url: data.secure_url,
            public_id: data.public_id,
            width: data.width,
            height: data.height,
            bytes: data.bytes,
            format: data.format
          };
        } else {
          throw new Error('Upload failed: No secure_url returned');
        }
      } catch (error) {
        console.error('Cloudinary upload error:', error);
        throw error;
      }
    }

    function simulateProgress(duration = 3000) {
      let progress = 0;
      const interval = duration / 20;
      
      const timer = setInterval(() => {
        progress += Math.random() * 10;
        if (progress > 90) {
          progress = 90;
        }
        
        elements.progressBar.style.width = `${progress}%`;
        
        if (progress < 30) {
          elements.uploadStatus.textContent = 'Subiendo imagen...';
        } else if (progress < 60) {
          elements.uploadStatus.textContent = 'Procesando imagen...';
        } else if (progress < 90) {
          elements.uploadStatus.textContent = 'Optimizando para web...';
        }
      }, interval);
      
      return timer;
    }

    // ========================================
    // MANEJO DE ARCHIVOS MEJORADO
    // ========================================
    
    async function handleFiles(files) {
      if (files.length > 0) {
        const file = files[0];
        if (file.type.startsWith('image/')) {
          await uploadImageToCloudinary(file);
        } else {
          showError('Solo se permiten archivos de imagen');
        }
      }
    }
    
    async function uploadImageToCloudinary(file) {
      // Resetear estados
      resetDropZone();
      
      // Mostrar estado de subida
      elements.dropZone.classList.add('uploading');
      elements.uploadProgress.classList.remove('hidden');
      elements.dropZoneContent.innerHTML = `
        <div class="text-center">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-amber-600 mx-auto mb-2"></div>
          <p class="text-sm text-amber-700 font-medium">Subiendo a Cloudinary...</p>
          <p class="text-xs text-amber-600">${file.name} (${formatFileSize(file.size)})</p>
        </div>
      `;
      
      // Simular progreso
      const progressTimer = simulateProgress();
      
      try {
        const result = await uploadToCloudinary(file);
        
        // Completar progreso
        clearInterval(progressTimer);
        elements.progressBar.style.width = '100%';
        elements.uploadStatus.textContent = 'Upload completado';
        
        // Mostrar éxito
        elements.dropZone.classList.remove('uploading');
        elements.dropZone.classList.add('success');
        elements.dropZoneContent.innerHTML = `
          <div class="text-center">
            <svg class="mx-auto h-8 w-8 text-green-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            <p class="text-sm text-green-700 font-medium">Imagen subida correctamente</p>
            <p class="text-xs text-green-600">Optimizada automáticamente</p>
          </div>
        `;
        
        // Actualizar imagen
        currentImage = result.url;
        elements.imageUrl.value = result.url;
        showImagePreview(result.url, result);
        
        // Restaurar drop zone después de 2 segundos
        setTimeout(resetDropZone, 2000);
        
      } catch (error) {
        clearInterval(progressTimer);
        showError(`Error al subir imagen: ${error.message}`);
      }
      
      // Ocultar progreso después de 3 segundos
      setTimeout(() => {
        elements.uploadProgress.classList.add('hidden');
      }, 3000);
    }
    
    function showImagePreview(url, metadata = null) {
      elements.previewImg.src = url;
      elements.imagePreview.classList.remove('hidden');
      
      if (metadata) {
        elements.imageInfo.textContent = `${metadata.width}×${metadata.height} • ${metadata.format.toUpperCase()} • ${formatFileSize(metadata.bytes)}`;
      } else {
        elements.imageInfo.textContent = 'Imagen cargada desde URL';
      }
    }
    
    function resetDropZone() {
      elements.dropZone.classList.remove('uploading', 'success', 'error', 'drag-over');
      elements.dropZoneContent.innerHTML = `
        <svg class="mx-auto h-8 w-8 text-gray-400 mb-2" stroke="currentColor" fill="none" viewBox="0 0 48 48">
          <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
        <p class="text-sm text-gray-600">Arrastra imagen o haz clic</p>
        <p class="text-xs text-gray-400 mt-1">Se subirá automáticamente a Cloudinary</p>
      `;
    }
    
    function showError(message) {
      elements.dropZone.classList.remove('uploading', 'success');
      elements.dropZone.classList.add('error');
      elements.dropZoneContent.innerHTML = `
        <div class="text-center">
          <svg class="mx-auto h-8 w-8 text-red-500 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
          <p class="text-sm text-red-700 font-medium">Error</p>
          <p class="text-xs text-red-600">${message}</p>
        </div>
      `;
      
      setTimeout(resetDropZone, 3000);
    }
    
    function formatFileSize(bytes) {
      if (bytes === 0) return '0 Bytes';
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // ========================================
    // EVENTOS DE DRAG & DROP
    // ========================================
    
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      elements.dropZone.addEventListener(eventName, preventDefaults, false);
    });
    
    ['dragenter', 'dragover'].forEach(eventName => {
      elements.dropZone.addEventListener(eventName, highlight, false);
    });
    
    ['dragleave', 'drop'].forEach(eventName => {
      elements.dropZone.addEventListener(eventName, unhighlight, false);
    });
    
    elements.dropZone.addEventListener('drop', handleDrop, false);
    elements.dropZone.addEventListener('click', () => elements.imageFile.click());
    elements.imageFile.addEventListener('change', handleFileSelect);
    
    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    function highlight() {
      if (!elements.dropZone.classList.contains('uploading')) {
        elements.dropZone.classList.add('drag-over');
      }
    }
    
    function unhighlight() {
      elements.dropZone.classList.remove('drag-over');
    }
    
    function handleDrop(e) {
      const dt = e.dataTransfer;
      const files = dt.files;
      handleFiles(files);
    }
    
    function handleFileSelect(e) {
      handleFiles(e.target.files);
    }

    // ========================================
    // FUNCIONES DEL EDITOR (SIN CAMBIOS)
    // ========================================
    
    // Auto-save con indicador visual
    Object.keys(elements).forEach(key => {
      if (elements[key] && elements[key].addEventListener) {
        elements[key].addEventListener('input', saveToLocalStorage);
      }
    });
    
    // Preview en tiempo real
    elements.content.addEventListener('input', updatePreview);
    
    // Slug preview
    elements.title.addEventListener('input', function() {
      const slug = generateSlug(this.value);
      document.getElementById('slugPreview').textContent = slug || '-';
    });
    
    // Contador de descripción con colores
    elements.description.addEventListener('input', function() {
      const count = this.value.length;
      const counter = document.getElementById('descCount');
      counter.textContent = count;
      
      if (count > 160) {
        counter.classList.add('text-red-600');
        counter.classList.remove('text-gray-500');
      } else {
        counter.classList.remove('text-red-600');
        counter.classList.add('text-gray-500');
      }
    });
    
    // URL manual de imagen
    elements.imageUrl.addEventListener('input', function() {
      if (this.value) {
        showImagePreview(this.value);
        currentImage = this.value;
      }
    });
    
    document.getElementById('removeImage').addEventListener('click', function() {
      elements.imagePreview.classList.add('hidden');
      elements.imageUrl.value = '';
      elements.imageFile.value = '';
      currentImage = null;
      resetDropZone();
    });
    
    // Botones de inserción
    document.getElementById('insertImage').addEventListener('click', () => {
      insertText('![Descripción](url-imagen.jpg)');
    });
    
    document.getElementById('insertLink').addEventListener('click', () => {
      insertText('[Texto del enlace](https://ejemplo.com)');
    });
    
    document.getElementById('insertCode').addEventListener('click', () => {
      insertText('```javascript\n// Tu código aquí\nconsole.log("Hello!");\n```');
    });
    
    function insertText(text) {
      const textarea = elements.content;
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const value = textarea.value;
      
      textarea.value = value.substring(0, start) + text + value.substring(end);
      textarea.selectionStart = textarea.selectionEnd = start + text.length;
      textarea.focus();
      updatePreview();
    }
    
    function updatePreview() {
      const markdown = elements.content.value;
      if (markdown.trim()) {
        elements.preview.innerHTML = marked.parse(markdown);
        if (typeof Prism !== 'undefined') {
          Prism.highlightAllUnder(elements.preview);
        }
      } else {
        elements.preview.innerHTML = `
          <div class="text-gray-500 italic text-center py-8">
            <svg class="w-12 h-12 mx-auto mb-3 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
            </svg>
            La vista previa aparecerá aquí mientras escribes
          </div>
        `;
      }
    }
    
    function generateSlug(title) {
      return title.toLowerCase()
        .replace(/[áàäâã]/g, 'a')
        .replace(/[éèëê]/g, 'e')
        .replace(/[íìïî]/g, 'i')
        .replace(/[óòöôõ]/g, 'o')
        .replace(/[úùüû]/g, 'u')
        .replace(/[ñ]/g, 'n')
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/^-|-$/g, '');
    }
    
    function saveToLocalStorage() {
      const data = {
        title: elements.title.value,
        description: elements.description.value,
        category: elements.category.value,
        tags: elements.tags.value,
        imageUrl: elements.imageUrl.value,
        content: elements.content.value,
        currentImage
      };
      localStorage.setItem('editor_cloudinary_draft', JSON.stringify(data));
    }
    
    function loadFromLocalStorage() {
      const saved = localStorage.getItem('editor_cloudinary_draft');
      if (saved) {
        const data = JSON.parse(saved);
        elements.title.value = data.title || '';
        elements.description.value = data.description || '';
        elements.category.value = data.category || '';
        elements.tags.value = data.tags || '';
        elements.imageUrl.value = data.imageUrl || '';
        elements.content.value = data.content || '';
        currentImage = data.currentImage;
        
        if (currentImage) {
          showImagePreview(currentImage);
        }
        
        updatePreview();
        document.getElementById('slugPreview').textContent = generateSlug(data.title) || '-';
        document.getElementById('descCount').textContent = (data.description || '').length;
      }
    }
    
    // ========================================
    // EVENTOS DE BOTONES
    // ========================================
    
    document.getElementById('saveBtn').addEventListener('click', function() {
      saveToLocalStorage();
      const btn = this;
      const original = btn.innerHTML;
      btn.innerHTML = `
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
        Guardado
      `;
      btn.classList.remove('bg-blue-600');
      btn.classList.add('bg-green-600');
      setTimeout(() => {
        btn.innerHTML = original;
        btn.classList.remove('bg-green-600');
        btn.classList.add('bg-blue-600');
      }, 2000);
    });
    
    document.getElementById('loadBtn').addEventListener('click', function() {
      if (confirm('¿Cargar el último borrador? Se perderán los cambios actuales.')) {
        loadFromLocalStorage();
      }
    });
    
    document.getElementById('clearBtn').addEventListener('click', function() {
      if (confirm('¿Limpiar todo el contenido?')) {
        Object.values(elements).forEach(el => {
          if (el && el.value !== undefined) el.value = '';
        });
        currentImage = null;
        elements.imagePreview.classList.add('hidden');
        resetDropZone();
        updatePreview();
        localStorage.removeItem('editor_cloudinary_draft');
      }
    });
    
    document.getElementById('generateBtn').addEventListener('click', generatePost);
    
    function generatePost() {
      const title = elements.title.value.trim();
      const content = elements.content.value.trim();
      
      if (!title || !content) {
        alert('El título y contenido son obligatorios');
        return;
      }
      
      const now = new Date();
      const isoDate = now.toISOString();
      const dateStr = now.toISOString().split('T')[0];
      const slug = generateSlug(title);
      const filename = `${dateStr}-${slug}.md`;
      
      let frontmatter = `---
title: "${title}"
pubDate: ${isoDate}`;
      
      if (elements.description.value.trim()) {
        frontmatter += `\ndescription: "${elements.description.value.trim()}"`;
      }
      
      if (currentImage) {
        frontmatter += `\nimage: "${currentImage}"`;
      }
      
      if (elements.category.value) {
        frontmatter += `\ncategories:\n  - "${elements.category.value}"`;
      }
      
      if (elements.tags.value.trim()) {
        const tagList = elements.tags.value.split(',').map(tag => tag.trim()).filter(tag => tag);
        if (tagList.length > 0) {
          frontmatter += `\ntags:`;
          tagList.forEach(tag => frontmatter += `\n  - "${tag}"`);
        }
      }
      
      frontmatter += `\ndraft: false\n---\n\n`;
      
      const finalContent = frontmatter + content;
      
      elements.output.textContent = finalContent;
      elements.outputSection.classList.remove('hidden');
      document.getElementById('filename').textContent = filename;
      
      elements.outputSection.scrollIntoView({ behavior: 'smooth' });
    }
    
    document.getElementById('copyBtn').addEventListener('click', function() {
      navigator.clipboard.writeText(elements.output.textContent).then(() => {
        const btn = this;
        const original = btn.innerHTML;
        btn.innerHTML = `
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
          Copiado
        `;
        setTimeout(() => btn.innerHTML = original, 2000);
      });
    });
    
    document.getElementById('downloadBtn').addEventListener('click', function() {
      const content = elements.output.textContent;
      const filename = document.getElementById('filename').textContent;
      const blob = new Blob([content], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      a.click();
      URL.revokeObjectURL(url);
    });
    
    // Shortcuts de teclado
    elements.content.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        switch(e.key) {
          case 's':
            e.preventDefault();
            document.getElementById('saveBtn').click();
            break;
          case 'Enter':
            e.preventDefault();
            generatePost();
            break;
        }
      }
    });
    
    // ========================================
    // INICIALIZACIÓN
    // ========================================
    
    // Cargar borrador al iniciar
    loadFromLocalStorage();
  </script>
</body>
</html>
    
