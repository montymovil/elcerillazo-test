---
import { siteConfig } from '../site.config';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import '../styles/global.css';

interface Props {
  title?: string;
  description?: string;
  image?: string;
  pageType?: 'website' | 'article';
  seo?: any;
}

const {
  title = siteConfig.title,
  description = siteConfig.description,
  image = siteConfig.image.src,
  pageType = 'website',
  seo = {}
} = Astro.props;

// Metadatos finales con fallbacks seguros
const finalTitle = seo.title || title;
const finalDescription = seo.description || description;
const finalOgTitle = seo?.og?.title || finalTitle;
const finalOgDescription = seo?.og?.description || finalDescription;
const finalOgImage = seo?.og?.image || image;

// Construir robots de forma segura
function buildRobots(robotsConfig: any) {
  if (!robotsConfig) return 'index, follow';
  
  const parts = [];
  
  // Index/noindex
  parts.push(robotsConfig.index === false ? 'noindex' : 'index');
  
  // Follow/nofollow  
  parts.push(robotsConfig.follow === false ? 'nofollow' : 'follow');
  
  // Directivas adicionales
  if (robotsConfig.noimageindex) parts.push('noimageindex');
  if (robotsConfig.nosnippet) parts.push('nosnippet');
  if (robotsConfig.maxImagePreview) parts.push(robotsConfig.maxImagePreview);
  
  return parts.join(', ');
}

const robotsContent = buildRobots(seo.robots);
const canonicalURL = seo.canonical || new URL(Astro.url.pathname, Astro.site);
---

<!DOCTYPE html>
<html lang="es" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <!-- SEO Principal -->
    <title>{finalTitle}</title>
    <meta name="description" content={finalDescription} />
    <link rel="canonical" href={canonicalURL} />
    <meta name="robots" content={robotsContent} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={seo?.og?.type || pageType} />
    <meta property="og:title" content={finalOgTitle} />
    <meta property="og:description" content={finalOgDescription} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={new URL(finalOgImage, Astro.url)} />
    <meta property="og:site_name" content={siteConfig.title} />
    
    <!-- Twitter -->
    <meta name="twitter:card" content={seo?.twitter?.card || "summary_large_image"} />
    <meta name="twitter:title" content={finalOgTitle} />
    <meta name="twitter:description" content={finalOgDescription} />
    <meta name="twitter:image" content={new URL(finalOgImage, Astro.url)} />
    
    <!-- Otros metadatos -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Schema.org JSON-LD -->
    {seo?.schema && (
  <script type="application/ld+json" is:inline set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@graph": seo.schema
  })}></script>
)}
    
    <script is:inline>
      const getThemePreference = () => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      };
      const isDark = getThemePreference() === 'dark';
      document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
      
      if (typeof localStorage !== 'undefined') {
        const observer = new MutationObserver(() => {
          const isDark = document.documentElement.classList.contains('dark');
          localStorage.setItem('theme', isDark ? 'dark' : 'light');
        });
        observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
      }
    </script>
    <link rel="sitemap" href="/sitemap-index.xml" />

  </head>
  <body class="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-900 dark:to-indigo-900 text-gray-900 dark:text-gray-100 transition-colors duration-500">
    <!-- Stars background -->
    <div class="fixed inset-0 overflow-hidden pointer-events-none">
      <div class="absolute top-1/4 left-1/4 w-2 h-2 bg-blue-300 rounded-full opacity-60 animate-pulse"></div>
      <div class="absolute top-1/3 right-1/4 w-1 h-1 bg-purple-300 rounded-full opacity-40 animate-pulse delay-1000"></div>
      <div class="absolute bottom-1/4 left-1/3 w-1.5 h-1.5 bg-pink-300 rounded-full opacity-50 animate-pulse delay-2000"></div>
      <div class="absolute top-1/2 right-1/3 w-1 h-1 bg-blue-200 rounded-full opacity-30 animate-pulse delay-3000"></div>
    </div>
    
    <div class="relative z-10 flex min-h-screen flex-col">
      <Header />
      <main class="flex-1">
        <slot />
      </main>
      <Footer />
    </div>
  </body>
</html>